class Solution {
    public ListNode[] splitListToParts(ListNode head, int k) {
        // Calculate the size of the list
        ListNode temp = head;
        int size = 0;
        while (temp != null) {
            size++;
            temp = temp.next;
        }

        // Calculate the size of each part and the remainder
        int capacity = size / k;
        int remainder = size % k;

        // Initialize the result array
        ListNode[] ans = new ListNode[k];

        // Reset temp to the head of the list
        temp = head;

        // Iterate through the list to split it into parts
        for (int i = 0; i < k; i++) {
            ans[i] = temp; // Set the current part's head
            int partSize = capacity + (i < remainder ? 1 : 0);

            // Move temp to the end of the current part
            for (int j = 0; j < partSize - 1; j++) {
                if (temp != null) {
                    temp = temp.next;
                }
            }

            if (temp != null) {
                ListNode next = temp.next;
                temp.next = null; // Terminate the current part
                temp = next; // Move to the next part
            }
        }

        return ans;
    }
}
